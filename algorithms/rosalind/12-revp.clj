
(defn reverse-complement [s]
  (let [compl {\A \T, \T \A, \C \G, \G \C}] 
    (apply str (reverse (map compl s)))))

(defn reverse-palindrome [s]
  (let [sz (count s)
        combs (for [i (range sz)
                    size (range 4 13)
                    :let [upto (+ i size)]
                    :when (<= upto sz)]
                [(inc i) (subs s i upto)])]
    (->> (filter (fn [[_ sub]] (= sub (reverse-complement sub))) combs)
         (map (fn [[i sub]] [i (count sub)])))))

(def dnasample "TCAATGCATGCGGGTCTATATGCAT")

(def dna
"CGCGGCCGAAAGCTGTGGTTCACAGTCACTGTTATGTGGAGCCGTCTGAGCTACCGGTAATCGGTTGCTGTCGTCCACTTCAGAACAAATGACGATAGAGCGGTGGTGATCTTGATGGTGAACAACCCAGCTCCAAACTGTACGACGTCTTGGTAAAGTCCACCATTCGGCGCCCCTGGGGGACGATCGGAGTTCCTGGGGAAAGCGAGACGGCCTAGTCACTATTAAATTGATCCTTCGTGTGCCCACAGAACGTTTAACATTTAAAATATACTAGCTCCTGCCGATTATCCAGAAATCGTCGAGAACGCATTCTGATCGCAGGCGGTTTGGGATGATGCAGTGCTGCTGTGTCAGCTAATTTTAATTTTGACGAATTACGTAGGTCTTACAAAAGCCCAACCTGGGCGTATTAGCAAACGTAAGCGCTTAAACCGCAGCCGTCATTTAATTTAATTAAATAGGTATCACCCGCTCTACAGCTGTCACCCACGCCCCCCAGGCATTTCGAACTATCAGATCCGCTACAGGTAATGAGAGGTACTAACACGTGAGTATCCGCTCGAGACACACGGCAGAATACATATGGAATGACCACGACAGACTCTATATGAGTACCCGCCCTTGTGACAAATGTGGGGTGCTGCACCACTGGAAAGTGTACTCTCTAAAAAACTGAAACGACCTTACGATACAACCACTTATGGGTCACCGTATCTTAATTGATAGGAGTGGTTAGCGTTAACTGCATTGGCGGGAAACCGTTGCTGAAAACTCCTTTCCTCCCCGACTAGCGCGGAGAGCCAGTTCAAATCCTTGTTCCAAACCGCCTGGAACGTGGGAAGTCGTTCCAAGAATCCAGGTGAGAACGGTTCGCCGCCTTCGCCAACTTTTATGCCCTAATGAATCGCG")


(doseq [pals (reverse-palindrome dna)]
  (println (clojure.string/join " " pals)))
