(ns eulerclj.problem2)

;Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
;
;1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
;
;By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.


; Recursive

(defn fib-even-sum [max]
  (loop [prev 1 curr 1 sum 0]
    (cond
      (> curr max) sum
      :else (recur curr 
                   (+ prev curr) 
                   (if (even? curr) (+ sum curr) sum)))))

(time (println (fib-even-sum 4000000))) ; 4613732


; Lazy seq

(def fibo (map first (iterate (fn [[prev curr]] [curr (+ prev curr)]) [0 1])))

(defn lazy-fib-even-sum [max]
  (let [fibo-nums (take-while #(< % max) fibo)
        even-fibo (filter #(even? %) fibo-nums)]
    (reduce + even-fibo)))

(time (println (lazy-fib-even-sum 4000000))) ; 4613732